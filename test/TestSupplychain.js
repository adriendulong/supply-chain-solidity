const truffleAssert = require('truffle-assertions');

let SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', accounts => {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let sku = 1
    let upc = 1
    const ownerID = accounts[0]
    const originWinemakerID = accounts[1]
    const originWinemakerName = "Clos Systey"
    const originWinemakerInformation = "Yarray Valley"
    const originWinemakerLatitude = "-38.239770"
    const originWinemakerLongitude = "144.341490"
    let productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    let wineState = 0
    const wineMerchantID = accounts[2]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Winemaker: accounts[1] ", accounts[1])
    console.log("WineMerchant: accounts[2] ", accounts[2])
    console.log("Consumer: accounts[4] ", accounts[4])

    before(async() => {
        // Grant each address with the right role
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addWinemaker(originWinemakerID);
        await supplyChain.addWineMerchant(wineMerchantID);
        await supplyChain.addConsumer(consumerID);
    });

    
    // 1st Test
    it("Testing smart contract function makeWine() that allows a winemaker to make a wine", async() => {
        const supplyChain = await SupplyChain.deployed()



        // Mark an item as Harvested by calling function harvestItem()
        let result = await supplyChain.makeWine(upc, originWinemakerName, originWinemakerInformation, originWinemakerLatitude, originWinemakerLongitude, productNotes, {from: originWinemakerID});

        // Check that the 'Made' event has been emitted
        truffleAssert.eventEmitted(result, 'Made');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchWineBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchWineBufferTwo.call(upc)

        
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originWinemakerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originWinemakerID, 'Error: Missing or Invalid originWinemakerID')
        assert.equal(resultBufferOne[4], originWinemakerName, 'Error: Missing or Invalid originWinemakerName')
        assert.equal(resultBufferOne[5], originWinemakerInformation, 'Error: Missing or Invalid originWinemakerInformation')
        assert.equal(resultBufferOne[6], originWinemakerLatitude, 'Error: Missing or Invalid originWinemakerLatitude')
        assert.equal(resultBufferOne[7], originWinemakerLongitude, 'Error: Missing or Invalid originWinemakerLongitude')
        assert.equal(resultBufferTwo.wineState, 0, 'Error: Invalid item State')      
    })    

    // 2nd Test
    it("Testing smart contract function ageWine() that allows a winemaker to age wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        const monthsAged = 12;
        
        let result = await supplyChain.ageWine(upc, monthsAged, {from: accounts[1]});
        
        // Watch the emitted event Aged
        truffleAssert.eventEmitted(result, 'Aged');

        const resultFetch = await supplyChain.fetchWineBufferTwo(upc);

        // Verify the result set
        assert.equal(resultFetch.wineSKU.toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultFetch.wineUPC.toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultFetch.wineState.toNumber(), 1, 'Error: Missing or Invalid state');
        assert.equal(resultFetch.monthsAged.toNumber(), monthsAged, 'Error: Missing or Invalid months aged value');
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Packed()
        

        // Mark an item as Packed by calling function packItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event ForSale()
        

        // Mark an item as ForSale by calling function sellItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Shipped()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Received()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Purchased()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

});

